package example

import "github.com/buchanae/roger/roger"

func (c *Config) RogerVals() roger.Vals {
	return map[string]roger.Val{
		"Server.Name":                                        roger.NewVal("Server name.", &c.Server.Name),
		"Server.HostName":                                    roger.NewVal("Server host name", &c.Server.HostName),
		"Server.HTTPPort":                                    roger.NewVal("", &c.Server.HTTPPort),
		"Server.RPCPort":                                     roger.NewVal("Port to serve gRPC traffic on", &c.Server.RPCPort),
		"Server.Password":                                    roger.NewVal("", &c.Server.Password),
		"Server.DisableHTTPCache":                            roger.NewVal("Disable http", &c.Server.DisableHTTPCache),
		"Server.MaxExecutorLogSize":                          roger.NewVal("", &c.Server.MaxExecutorLogSize),
		"Server.Logger.Level":                                roger.NewVal("Log level docs", &c.Server.Logger.Level),
		"Server.Logger.Formatter":                            roger.NewVal("", &c.Server.Logger.Formatter),
		"Server.Logger.OutputFile":                           roger.NewVal("", &c.Server.Logger.OutputFile),
		"Server.Logger.Foo.FooField":                         roger.NewVal("", &c.Server.Logger.Foo.FooField),
		"Server.Logger.Foo.Level":                            roger.NewVal("Foo level docs", &c.Server.Logger.Foo.Level),
		"Worker.Storage.Local.AllowedDirs":                   roger.NewVal("", &c.Worker.Storage.Local.AllowedDirs),
		"Worker.Storage.S3.Key":                              roger.NewVal("", &c.Worker.Storage.S3.Key),
		"Worker.Storage.S3.Secret":                           roger.NewVal("", &c.Worker.Storage.S3.Secret),
		"Worker.Storage.S3.FromEnv":                          roger.NewVal("", &c.Worker.Storage.S3.FromEnv),
		"Worker.Storage.GS":                                  roger.NewVal("", &c.Worker.Storage.GS),
		"Worker.Storage.Swift.UserName":                      roger.NewVal("", &c.Worker.Storage.Swift.UserName),
		"Worker.Storage.Swift.Password":                      roger.NewVal("", &c.Worker.Storage.Swift.Password),
		"Worker.Storage.Swift.AuthURL":                       roger.NewVal("", &c.Worker.Storage.Swift.AuthURL),
		"Worker.Storage.Swift.TenantName":                    roger.NewVal("", &c.Worker.Storage.Swift.TenantName),
		"Worker.Storage.Swift.TenantID":                      roger.NewVal("", &c.Worker.Storage.Swift.TenantID),
		"Worker.Storage.Swift.RegionName":                    roger.NewVal("", &c.Worker.Storage.Swift.RegionName),
		"Worker.WorkDir":                                     roger.NewVal("Directory to write task files to", &c.Worker.WorkDir),
		"Worker.UpdateRate":                                  roger.NewVal("How often the worker sends task log updates", &c.Worker.UpdateRate),
		"Worker.BufferSize":                                  roger.NewVal("Max bytes to store in-memory between updates", &c.Worker.BufferSize),
		"Worker.Logger.Level":                                roger.NewVal("Log level docs", &c.Worker.Logger.Level),
		"Worker.Logger.Formatter":                            roger.NewVal("", &c.Worker.Logger.Formatter),
		"Worker.Logger.OutputFile":                           roger.NewVal("", &c.Worker.Logger.OutputFile),
		"Worker.Logger.Foo.FooField":                         roger.NewVal("", &c.Worker.Logger.Foo.FooField),
		"Worker.Logger.Foo.Level":                            roger.NewVal("Foo level docs", &c.Worker.Logger.Foo.Level),
		"Worker.TaskReader":                                  roger.NewVal("", &c.Worker.TaskReader),
		"Worker.TaskReaders.RPC.ServerAddress":               roger.NewVal("RPC address of the Funnel server", &c.Worker.TaskReaders.RPC.ServerAddress),
		"Worker.TaskReaders.RPC.ServerPassword":              roger.NewVal("Password for basic auth.", &c.Worker.TaskReaders.RPC.ServerPassword),
		"Worker.TaskReaders.Dynamo.Region":                   roger.NewVal("", &c.Worker.TaskReaders.Dynamo.Region),
		"Worker.TaskReaders.Dynamo.Key":                      roger.NewVal("", &c.Worker.TaskReaders.Dynamo.Key),
		"Worker.TaskReaders.Dynamo.Secret":                   roger.NewVal("", &c.Worker.TaskReaders.Dynamo.Secret),
		"Worker.TaskReaders.Dynamo.TableBasename":            roger.NewVal("", &c.Worker.TaskReaders.Dynamo.TableBasename),
		"Worker.ActiveEventWriters":                          roger.NewVal("", &c.Worker.ActiveEventWriters),
		"Worker.EventWriters.RPC.ServerAddress":              roger.NewVal("RPC address of the Funnel server", &c.Worker.EventWriters.RPC.ServerAddress),
		"Worker.EventWriters.RPC.ServerPassword":             roger.NewVal("Password for basic auth.", &c.Worker.EventWriters.RPC.ServerPassword),
		"Worker.EventWriters.RPC.UpdateTimeout":              roger.NewVal("Timeout duration for gRPC calls", &c.Worker.EventWriters.RPC.UpdateTimeout),
		"Worker.EventWriters.Dynamo.Region":                  roger.NewVal("", &c.Worker.EventWriters.Dynamo.Region),
		"Worker.EventWriters.Dynamo.Key":                     roger.NewVal("", &c.Worker.EventWriters.Dynamo.Key),
		"Worker.EventWriters.Dynamo.Secret":                  roger.NewVal("", &c.Worker.EventWriters.Dynamo.Secret),
		"Worker.EventWriters.Dynamo.TableBasename":           roger.NewVal("", &c.Worker.EventWriters.Dynamo.TableBasename),
		"Scheduler.ScheduleRate":                             roger.NewVal("How often to run a scheduler iteration.", &c.Scheduler.ScheduleRate),
		"Scheduler.ScheduleChunk":                            roger.NewVal("How many tasks to schedule in one iteration.", &c.Scheduler.ScheduleChunk),
		"Scheduler.NodePingTimeout":                          roger.NewVal("How long to wait for a node ping before marking it as dead", &c.Scheduler.NodePingTimeout),
		"Scheduler.NodeInitTimeout":                          roger.NewVal("How long to wait for node initialization before marking it dead", &c.Scheduler.NodeInitTimeout),
		"Scheduler.NodeDeadTimeout":                          roger.NewVal("How long to wait before deleting a dead node from the DB.", &c.Scheduler.NodeDeadTimeout),
		"Scheduler.Node.ID":                                  roger.NewVal("", &c.Scheduler.Node.ID),
		"Scheduler.Node.Resources.Cpus":                      roger.NewVal("A Node will automatically try to detect what resources are available to it.", &c.Scheduler.Node.Resources.Cpus),
		"Scheduler.Node.Resources.RamGb":                     roger.NewVal("A Node will automatically try to detect what resources are available to it.", &c.Scheduler.Node.Resources.RamGb),
		"Scheduler.Node.Resources.DiskGb":                    roger.NewVal("A Node will automatically try to detect what resources are available to it.", &c.Scheduler.Node.Resources.DiskGb),
		"Scheduler.Node.Timeout":                             roger.NewVal("If the node has been idle for longer than the timeout, it will shut down.", &c.Scheduler.Node.Timeout),
		"Scheduler.Node.UpdateRate":                          roger.NewVal("How often the node sends update requests to the server.", &c.Scheduler.Node.UpdateRate),
		"Scheduler.Node.UpdateTimeout":                       roger.NewVal("Timeout duration for UpdateNode() gRPC calls", &c.Scheduler.Node.UpdateTimeout),
		"Scheduler.Node.Metadata":                            roger.NewVal("", &c.Scheduler.Node.Metadata),
		"Scheduler.Node.ServerAddress":                       roger.NewVal("RPC address of the Funnel server", &c.Scheduler.Node.ServerAddress),
		"Scheduler.Node.ServerPassword":                      roger.NewVal("Password for basic auth.", &c.Scheduler.Node.ServerPassword),
		"Scheduler.Node.Logger.Level":                        roger.NewVal("Log level docs", &c.Scheduler.Node.Logger.Level),
		"Scheduler.Node.Logger.Formatter":                    roger.NewVal("", &c.Scheduler.Node.Logger.Formatter),
		"Scheduler.Node.Logger.OutputFile":                   roger.NewVal("", &c.Scheduler.Node.Logger.OutputFile),
		"Scheduler.Node.Logger.Foo.FooField":                 roger.NewVal("", &c.Scheduler.Node.Logger.Foo.FooField),
		"Scheduler.Node.Logger.Foo.Level":                    roger.NewVal("Foo level docs", &c.Scheduler.Node.Logger.Foo.Level),
		"Scheduler.Logger.Level":                             roger.NewVal("Log level docs", &c.Scheduler.Logger.Level),
		"Scheduler.Logger.Formatter":                         roger.NewVal("", &c.Scheduler.Logger.Formatter),
		"Scheduler.Logger.OutputFile":                        roger.NewVal("", &c.Scheduler.Logger.OutputFile),
		"Scheduler.Logger.Foo.FooField":                      roger.NewVal("", &c.Scheduler.Logger.Foo.FooField),
		"Scheduler.Logger.Foo.Level":                         roger.NewVal("Foo level docs", &c.Scheduler.Logger.Foo.Level),
		"Scheduler.Worker.Storage.Local.AllowedDirs":         roger.NewVal("", &c.Scheduler.Worker.Storage.Local.AllowedDirs),
		"Scheduler.Worker.Storage.S3.Key":                    roger.NewVal("", &c.Scheduler.Worker.Storage.S3.Key),
		"Scheduler.Worker.Storage.S3.Secret":                 roger.NewVal("", &c.Scheduler.Worker.Storage.S3.Secret),
		"Scheduler.Worker.Storage.S3.FromEnv":                roger.NewVal("", &c.Scheduler.Worker.Storage.S3.FromEnv),
		"Scheduler.Worker.Storage.GS":                        roger.NewVal("", &c.Scheduler.Worker.Storage.GS),
		"Scheduler.Worker.Storage.Swift.UserName":            roger.NewVal("", &c.Scheduler.Worker.Storage.Swift.UserName),
		"Scheduler.Worker.Storage.Swift.Password":            roger.NewVal("", &c.Scheduler.Worker.Storage.Swift.Password),
		"Scheduler.Worker.Storage.Swift.AuthURL":             roger.NewVal("", &c.Scheduler.Worker.Storage.Swift.AuthURL),
		"Scheduler.Worker.Storage.Swift.TenantName":          roger.NewVal("", &c.Scheduler.Worker.Storage.Swift.TenantName),
		"Scheduler.Worker.Storage.Swift.TenantID":            roger.NewVal("", &c.Scheduler.Worker.Storage.Swift.TenantID),
		"Scheduler.Worker.Storage.Swift.RegionName":          roger.NewVal("", &c.Scheduler.Worker.Storage.Swift.RegionName),
		"Scheduler.Worker.WorkDir":                           roger.NewVal("Directory to write task files to", &c.Scheduler.Worker.WorkDir),
		"Scheduler.Worker.UpdateRate":                        roger.NewVal("How often the worker sends task log updates", &c.Scheduler.Worker.UpdateRate),
		"Scheduler.Worker.BufferSize":                        roger.NewVal("Max bytes to store in-memory between updates", &c.Scheduler.Worker.BufferSize),
		"Scheduler.Worker.Logger.Level":                      roger.NewVal("Log level docs", &c.Scheduler.Worker.Logger.Level),
		"Scheduler.Worker.Logger.Formatter":                  roger.NewVal("", &c.Scheduler.Worker.Logger.Formatter),
		"Scheduler.Worker.Logger.OutputFile":                 roger.NewVal("", &c.Scheduler.Worker.Logger.OutputFile),
		"Scheduler.Worker.Logger.Foo.FooField":               roger.NewVal("", &c.Scheduler.Worker.Logger.Foo.FooField),
		"Scheduler.Worker.Logger.Foo.Level":                  roger.NewVal("Foo level docs", &c.Scheduler.Worker.Logger.Foo.Level),
		"Scheduler.Worker.TaskReader":                        roger.NewVal("", &c.Scheduler.Worker.TaskReader),
		"Scheduler.Worker.TaskReaders.RPC.ServerAddress":     roger.NewVal("RPC address of the Funnel server", &c.Scheduler.Worker.TaskReaders.RPC.ServerAddress),
		"Scheduler.Worker.TaskReaders.RPC.ServerPassword":    roger.NewVal("Password for basic auth.", &c.Scheduler.Worker.TaskReaders.RPC.ServerPassword),
		"Scheduler.Worker.TaskReaders.Dynamo.Region":         roger.NewVal("", &c.Scheduler.Worker.TaskReaders.Dynamo.Region),
		"Scheduler.Worker.TaskReaders.Dynamo.Key":            roger.NewVal("", &c.Scheduler.Worker.TaskReaders.Dynamo.Key),
		"Scheduler.Worker.TaskReaders.Dynamo.Secret":         roger.NewVal("", &c.Scheduler.Worker.TaskReaders.Dynamo.Secret),
		"Scheduler.Worker.TaskReaders.Dynamo.TableBasename":  roger.NewVal("", &c.Scheduler.Worker.TaskReaders.Dynamo.TableBasename),
		"Scheduler.Worker.ActiveEventWriters":                roger.NewVal("", &c.Scheduler.Worker.ActiveEventWriters),
		"Scheduler.Worker.EventWriters.RPC.ServerAddress":    roger.NewVal("RPC address of the Funnel server", &c.Scheduler.Worker.EventWriters.RPC.ServerAddress),
		"Scheduler.Worker.EventWriters.RPC.ServerPassword":   roger.NewVal("Password for basic auth.", &c.Scheduler.Worker.EventWriters.RPC.ServerPassword),
		"Scheduler.Worker.EventWriters.RPC.UpdateTimeout":    roger.NewVal("Timeout duration for gRPC calls", &c.Scheduler.Worker.EventWriters.RPC.UpdateTimeout),
		"Scheduler.Worker.EventWriters.Dynamo.Region":        roger.NewVal("", &c.Scheduler.Worker.EventWriters.Dynamo.Region),
		"Scheduler.Worker.EventWriters.Dynamo.Key":           roger.NewVal("", &c.Scheduler.Worker.EventWriters.Dynamo.Key),
		"Scheduler.Worker.EventWriters.Dynamo.Secret":        roger.NewVal("", &c.Scheduler.Worker.EventWriters.Dynamo.Secret),
		"Scheduler.Worker.EventWriters.Dynamo.TableBasename": roger.NewVal("", &c.Scheduler.Worker.EventWriters.Dynamo.TableBasename),
		"Scheduler.Backend":                                  roger.NewVal("", &c.Scheduler.Backend),
		"Scheduler.Backends.Local":                           roger.NewVal("", &c.Scheduler.Backends.Local),
		"Scheduler.Backends.HTCondor.Template":               roger.NewVal("", &c.Scheduler.Backends.HTCondor.Template),
		"Scheduler.Backends.SLURM.Template":                  roger.NewVal("", &c.Scheduler.Backends.SLURM.Template),
		"Scheduler.Backends.PBS.Template":                    roger.NewVal("", &c.Scheduler.Backends.PBS.Template),
		"Scheduler.Backends.GridEngine.Template":             roger.NewVal("", &c.Scheduler.Backends.GridEngine.Template),
		"Scheduler.Backends.OpenStack.KeyPair":               roger.NewVal("", &c.Scheduler.Backends.OpenStack.KeyPair),
		"Scheduler.Backends.OpenStack.ConfigPath":            roger.NewVal("", &c.Scheduler.Backends.OpenStack.ConfigPath),
		"Scheduler.Backends.GCE.AccountFile":                 roger.NewVal("", &c.Scheduler.Backends.GCE.AccountFile),
		"Scheduler.Backends.GCE.Project":                     roger.NewVal("", &c.Scheduler.Backends.GCE.Project),
		"Scheduler.Backends.GCE.Zone":                        roger.NewVal("", &c.Scheduler.Backends.GCE.Zone),
		"Scheduler.Backends.GCE.Weights.PreferQuickStartup":  roger.NewVal("", &c.Scheduler.Backends.GCE.Weights.PreferQuickStartup),
		"Scheduler.Backends.GCE.CacheTTL":                    roger.NewVal("", &c.Scheduler.Backends.GCE.CacheTTL),
		"Log.Level":                                          roger.NewVal("Log level docs", &c.Log.Level),
		"Log.Formatter":                                      roger.NewVal("", &c.Log.Formatter),
		"Log.OutputFile":                                     roger.NewVal("", &c.Log.OutputFile),
		"Log.Foo.FooField":                                   roger.NewVal("", &c.Log.Foo.FooField),
		"Log.Foo.Level":                                      roger.NewVal("Foo level docs", &c.Log.Foo.Level),
		"Dynamo.Region":                                      roger.NewVal("", &c.Dynamo.Region),
		"Dynamo.Key":                                         roger.NewVal("", &c.Dynamo.Key),
		"Dynamo.Secret":                                      roger.NewVal("", &c.Dynamo.Secret),
		"Dynamo.TableBasename":                               roger.NewVal("", &c.Dynamo.TableBasename),
	}
}

